class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        int start = 0; 
        long long maxAns = 0;  
        long long currentAns = 0;  
        unordered_map<int, int> freq;  
        for (int end = 0; end < nums.size(); end++) {
            currentAns += nums[end];
            freq[nums[end]]++;
            while (end - start + 1 > k) {
                currentAns -= nums[start];
                freq[nums[start]]--;
                if (freq[nums[start]] == 0) {
                    freq.erase(nums[start]);
                }
                start++;
            }
            if (end - start + 1 == k && freq.size() == k) {
                maxAns = max(maxAns, currentAns);
            }
        }
        return maxAns;
    }
};
